//------------------------------------------------
//--- 010 Editor v12.0.1k Binary Template
//
//      File: 
//   Authors: Swyter
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *~.des
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

local uint indent_spc = 0;

typedef struct
{
    uint16 key_len; byte unk_a, unk_b, a, b; int16 c; int next_parent_abs_offset;
    int thong, next_sublevel_abs_offset; char key[key_len];
} parent_t <read=read_parent>;

string read_parent(struct parent_t& _thing)
{
    string buf = ""; SPrintf(buf, "[%s]   (np:%i) (ns:%i)", _thing.key, _thing.next_parent_abs_offset, _thing.next_sublevel_abs_offset);
    return buf;
}

typedef struct
{
    local uint indent = 0;
    enum<ubyte> { type_integer, type_float, type_str } value_type;
    ubyte size_key, size_value, pad_maybe; int next_tag_abs_offset;
    char key[size_key];

    /* swy: because the minimum size of the union is the biggest sub-field (4 bytes), we need to manually go back a bit
            in case size_value is less than four, like with empty strings, that would otherwise break the entry_t size
            and alter what comes after it */
    local uint64 save_offset = FTell();

    union { char val_str[size_value]; float val_float; int val_int; } value; // 5 mesh = 15 old_belial.msh

    FSeek(save_offset + size_value);
} entry_t <read=read_entry>;

string read_entry(struct entry_t& _thing)
{
    string buf = "";

    switch (_thing.value_type)
    {
        case type_integer: return SPrintf(buf, "%*s%s = %i <n:%i>",     _thing.indent * 2, "", _thing.key, _thing.value.val_int,   _thing.next_tag_abs_offset); break;
        case type_float:   return SPrintf(buf, "%*s%s = %f <n:%i>",     _thing.indent * 2, "", _thing.key, _thing.value.val_float, _thing.next_tag_abs_offset); break;
        case type_str:     return SPrintf(buf, "%*s%s = \"%s\" <n:%i>", _thing.indent * 2, "", _thing.key, _thing.value.val_str,   _thing.next_tag_abs_offset); break;
    }

    return buf;    
}

local int64 next_parent_offset = 0, next_tag_offset = 0;
local int64 cur_offset = FTell();
local int64 end_offset = FileSize();

while (cur_offset < end_offset)
{

    if ((cur_offset >= next_parent_offset && next_parent_offset != -1) || next_tag_offset == -1)
    {
        parent_t head <optimize=false>;
        next_parent_offset = head.next_parent_abs_offset;
        next_tag_offset = 0;

        if (head.next_sublevel_abs_offset)
            indent_spc++;
    }
    else
    {
        entry_t more <optimize=false>; // marax~.des, for now
        next_tag_offset = more.next_tag_abs_offset;

        more.indent = indent_spc;
    }

    if (next_parent_offset === -1 &&next_tag_offset == -1)
        indent_spc--;

    cur_offset = FTell();
}