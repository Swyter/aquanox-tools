//------------------------------------------------
//--- 010 Editor v12.0.1k Binary Template
//
//      File: 
//   Authors: Swyter
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *~.des
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

typedef struct
{
    local uint indent = 0;

    uint16 key_len; byte unk_a, unk_b, a, b; int16 c;

    int next_subhead_abs_offset,      /* swy: next head in a child level */
        next_samelvl_head_abs_offset, /* swy: next head in the same indentation level */
        next_subentry_abs_offset;     /* swy: next plain entry in a child level */

    char key[key_len];
} header_t <read=read_header>;

string read_header(struct header_t& _thing)
{
    string buf = ""; SPrintf(buf, "%*s[%s]   (vh:%i) (=h:%i) (ve:%i)", _thing.indent * 4, "", _thing.key, _thing.next_subhead_abs_offset, _thing.next_samelvl_head_abs_offset, _thing.next_subentry_abs_offset);
    return buf;
}

typedef struct
{
    local uint indent = 0;
    enum<ubyte> { type_integer, type_float, type_str, type_float3, type_float2 } value_type;
    ubyte size_key, size_value, pad_maybe; int next_same_lvl;
    char key[size_key];

    /* swy: because the minimum size of the union is the biggest sub-field (4 bytes), we need to manually go back a bit
            in case size_value is less than four, like with empty strings, that would otherwise break the entry_t size
            and alter what comes after it */
    local uint64 save_offset = FTell();

         if (value_type == type_float3) struct { float x, y, z; } value;
    else if (value_type == type_float2) struct { float x, y;    } value;
    else                                 union { char val_str[size_value]; float val_float; int val_int; } value; // 5 mesh = 15 old_belial.msh

    FSeek(save_offset + size_value);
} entry_t <read=read_entry>;

string read_entry(struct entry_t& _thing)
{
    string buf = "";

    switch (_thing.value_type)
    {
        case type_integer: return SPrintf(buf, "%*s%s = %i <=e:%i>",           _thing.indent * 4, "", _thing.key, _thing.value.val_int,                           _thing.next_same_lvl); break;
        case type_float:   return SPrintf(buf, "%*s%s = %f <=e:%i>",           _thing.indent * 4, "", _thing.key, _thing.value.val_float,                         _thing.next_same_lvl); break;
        case type_str:     return SPrintf(buf, "%*s%s = \"%s\" <=e:%i>",       _thing.indent * 4, "", _thing.key, _thing.value.val_str,                           _thing.next_same_lvl); break;
        case type_float3:  return SPrintf(buf, "%*s%s = {%f, %f, %f} <=e:%i>", _thing.indent * 4, "", _thing.key, _thing.value.x, _thing.value.y, _thing.value.z, _thing.next_same_lvl); break;
        case type_float2:  return SPrintf(buf, "%*s%s = {%f, %f} <=e:%i>",     _thing.indent * 4, "", _thing.key, _thing.value.x, _thing.value.y,                 _thing.next_same_lvl); break;
    }

    return buf;    
}


local uint cur_indent = 0;

struct block_state { int indent_level, vh, equalh, ve, prev_equalh; };

local struct block_state sav_indent[5]; local int sav_ind_idx = 0;

sav_indent[sav_ind_idx].indent_level = 0;
sav_indent[sav_ind_idx].equalh = 0;

sav_indent[sav_ind_idx].vh = -1;
sav_indent[sav_ind_idx].ve = -1;

local int equale = -1;
local int equalh = 0;

local int64 cur_offset = FTell(), prev_offset;
local int64 end_offset = FileSize();

while (cur_offset < end_offset)
{
    prev_offset = FTell();

    if (sav_indent[sav_ind_idx].vh == cur_offset || sav_indent[sav_ind_idx].equalh == cur_offset || sav_indent[sav_ind_idx].prev_equalh == cur_offset)
    {
        if (sav_indent[sav_ind_idx].equalh == cur_offset && cur_offset != 0)
        {
            sav_indent[sav_ind_idx].equalh = -1;

            sav_ind_idx--;

            cur_indent = sav_indent[sav_ind_idx].indent_level;

            sav_indent[sav_ind_idx].prev_equalh = sav_indent[sav_ind_idx + 1].equalh;

            //if (sav_indent[sav_ind_idx].equalh == cur_offset)
            //{
            //    cur_indent--;
            //}

            Printf("%*s-  (set stack: %u -> %u)\n", cur_indent * 4, "", sav_ind_idx + 1, sav_ind_idx);
        }

        header_t head <optimize=false>;
        head.indent = cur_indent;

        Printf("%*s.  (set stack: %u -> %u)\n", cur_indent * 4, "", sav_ind_idx, sav_ind_idx + 1);

        sav_ind_idx++;
        cur_indent++;

        sav_indent[sav_ind_idx].vh     = head.next_subhead_abs_offset;
        sav_indent[sav_ind_idx].equalh = head.next_samelvl_head_abs_offset;

        sav_indent[sav_ind_idx].ve     = head.next_subentry_abs_offset;

        sav_indent[sav_ind_idx].indent_level = cur_indent;

        sav_indent[sav_ind_idx].prev_equalh = -666;

        /* swy: update the current offset to that we can create a new entry in this loop right afterwards */
        cur_offset = FTell();
    }

    if (sav_indent[sav_ind_idx].ve == cur_offset || equale == cur_offset)
    {
        entry_t entr <optimize=false>;
        entr.indent = cur_indent;

        equale = entr.next_same_lvl;

        Printf("%*s. (stack: %u)\n", cur_indent * 4, "", sav_ind_idx);
    }


    cur_offset = FTell();

    if (equale == -1 && sav_indent[sav_ind_idx].vh == -1)// && sav_indent[sav_ind_idx].equalh == -1)
    {
            sav_ind_idx--;
            cur_indent = sav_indent[sav_ind_idx].indent_level;

            sav_indent[sav_ind_idx].prev_equalh = sav_indent[sav_ind_idx + 1].equalh;

            //if (sav_indent[sav_ind_idx].equalh == cur_offset)
            //{
            //    cur_indent--;
            //}

            Printf("%*s-  (set stack: %u -> %u)\n", cur_indent * 4, "", sav_ind_idx + 1, sav_ind_idx);
    }
    else
    {

        if (prev_offset == cur_offset && sav_indent[sav_ind_idx].equalh != cur_offset)
            break;
    }
}

/*

# the v means downward arrow. h is header, and e entry

indent set to zero
=h is offset zero # the first element to parse is always the HEAD-called header
vh and =e are -1

while not file end:
    # swy: create a new entry/header if we arrive at an entry/header offset
    #      the only way to indent is to create a new level hosted by a parent header
    if vh is offs or =h is offs:
        new header
        push vh, =h, ve to stack, save indent level
    
        # swy: indent on a new child level,
        indent++
    
    # swy: we don't need to save =e across levels because entries only form part of a single level
    if ve is offs or =e is offs:
        new entry
        overwrite =e with latest one # save it for the next entry
    
    # swy: reached end of header entries, or the header has no child headers/entries at all, go back a level
    if (=e is -1 and vh is -1) or (vh is -1 and ve is -1):
        pop stack, restore indent level

*/